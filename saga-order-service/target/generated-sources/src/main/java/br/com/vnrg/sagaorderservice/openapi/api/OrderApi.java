/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.vnrg.sagaorderservice.openapi.api;

import br.com.vnrg.sagaorderservice.openapi.model.Order;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-27T19:11:35.168063657-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "order", description = "Order operations")
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /order : Add a new order
     * Add a new order
     *
     * @param order Create a new Order (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addOrder",
        summary = "Add a new order",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Order> _addOrder(
        @Parameter(name = "Order", description = "Create a new Order", required = true) @Valid @RequestBody Order order
    ) {
        return addOrder(order);
    }

    // Override this method
    default  ResponseEntity<Order> addOrder(Order order) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 7, \"orderId\" : 198772, \"id\" : 10, \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /order/{orderId} : Deletes a Order
     * 
     *
     * @param orderId Order id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Order value (status code 400)
     */
    @Operation(
        operationId = "deleteOrder",
        summary = "Deletes a Order",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid Order value")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/order/{orderId}"
    )
    default ResponseEntity<Void> _deleteOrder(
        @Parameter(name = "orderId", description = "Order id to delete", required = true) @PathVariable("orderId") Long orderId,
        @Parameter(name = "apiKey", description = "") @RequestHeader(value = "apiKey", required = false) String apiKey
    ) {
        return deleteOrder(orderId, apiKey);
    }

    // Override this method
    default  ResponseEntity<Void> deleteOrder(Long orderId, String apiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order : Find all orders
     * Find all orders
     *
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findOrders",
        summary = "Find all orders",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> _findOrders(
        
    ) {
        return findOrders();
    }

    // Override this method
    default  ResponseEntity<List<Order>> findOrders() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 7, \"orderId\" : 198772, \"id\" : 10, \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order/findByStatus : Finds Order by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to available)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findOrdersByStatus",
        summary = "Finds Order by status",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order/findByStatus",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> _findOrdersByStatus(
        @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "available") String status
    ) {
        return findOrdersByStatus(status);
    }

    // Override this method
    default  ResponseEntity<List<Order>> findOrdersByStatus(String status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 7, \"orderId\" : 198772, \"id\" : 10, \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order/{orderId} : Find Order by ID
     * Returns a single order
     *
     * @param orderId ID of order to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @Operation(
        operationId = "getOrderById",
        summary = "Find Order by ID",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Order not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order/{orderId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Order> _getOrderById(
        @Parameter(name = "orderId", description = "ID of order to return", required = true) @PathVariable("orderId") Long orderId
    ) {
        return getOrderById(orderId);
    }

    // Override this method
    default  ResponseEntity<Order> getOrderById(Long orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 7, \"orderId\" : 198772, \"id\" : 10, \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /order : Update an existent Order
     * Update an existent Order by Id
     *
     * @param order Update an existent Order (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateOrder",
        summary = "Update an existent Order",
        tags = { "order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Order not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Order> _updateOrder(
        @Parameter(name = "Order", description = "Update an existent Order", required = true) @Valid @RequestBody Order order
    ) {
        return updateOrder(order);
    }

    // Override this method
    default  ResponseEntity<Order> updateOrder(Order order) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 7, \"orderId\" : 198772, \"id\" : 10, \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
